generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/@prisma/postgres/client"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_DATABASE_URL")
}

model Article {
  id             Int           @id @default(autoincrement())
  name           String        @db.VarChar
  stock_quantity Int
  order_items    OrderItem[]
}

model Dealer {
  id             Int        @id @default(autoincrement())
  company_name   String     @db.VarChar
  contact_number String     @db.VarChar
  contact_email  String     @unique @db.VarChar
  address        String     @db.VarChar
  country        String     @db.VarChar
  postal_code    String     @db.VarChar
  user_id        Int?       @unique
  users          User?      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  scooters       Scooter[]
}

model Maintenance {
  id              Int          @id @default(autoincrement())
  technician_name String       @db.VarChar
  type            String       @db.VarChar
  status          String       @default("planifi√©e")
  date_planned    DateTime
  date_completed  DateTime?
  cost            Decimal      @db.Decimal(10, 2)
  comment         String?
  scooter_id      Int
  scooter         Scooter      @relation(fields: [scooter_id], references: [id], onDelete: Cascade)
  notifications   Notification[]
}


model Notification {
  id             Int      @id @default(autoincrement())
  message        String   @db.VarChar
  sent_at        DateTime @default(now())
  maintenance_id Int
  maintenance    Maintenance @relation(fields: [maintenance_id], references: [id], onDelete: Cascade)
}


model OrderItem {
  id          Int          @id @default(autoincrement())
  article_id  Int
  unit_price  Decimal      @db.Decimal(10, 2)
  quantity    Int
  total_price Decimal?     @db.Decimal(10, 2)
  order_id    Int
  article     Article      @relation(fields: [article_id], references: [id], onDelete: Cascade)
  order       Order        @relation(fields: [order_id], references: [id], onDelete: Cascade)
}

model Order {
  id                Int          @id @default(autoincrement())
  supplier          String       @db.VarChar
  status            String       @db.VarChar
  delivery_due_date DateTime     @db.Date
  tax               Decimal      @db.Decimal(5, 2)
  total_amount      Decimal      @db.Decimal(10, 2)
  user_id           Int
  order_items       OrderItem[]
  user              User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Partner {
  id             Int        @id @default(autoincrement())
  company_name   String     @db.VarChar
  contact_number String     @db.VarChar
  contact_email  String     @unique @db.VarChar
  address        String     @db.VarChar
  country        String     @db.VarChar
  postal_code    String     @db.VarChar
  type           String     @db.VarChar
  user_id        Int?       @unique
  user           User?      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  scooters       Scooter[]
}

model Scooter {
  id               Int            @id @default(autoincrement())
  license_plate    String         @unique @db.VarChar
  status           String         @db.VarChar
  dealer_id        Int?
  partner_id       Int?
  scooter_model_id Int
  maintenances     Maintenance[]
  dealer           Dealer?        @relation(fields: [dealer_id], references: [id])
  model            ScooterModel   @relation(fields: [scooter_model_id], references: [id], onDelete: Cascade)
  partner          Partner?       @relation(fields: [partner_id], references: [id])
  warranty         Warranty?
}

model ScooterModel {
  id                   Int        @id @default(autoincrement())
  name                 String     @db.VarChar
  battery_range        Int
  maintenance_interval Int
  scooters             Scooter[]
}

model User {
  id       Int       @id @default(autoincrement())
  email    String    @unique @db.VarChar
  password String    @db.VarChar
  role     String    @db.VarChar
  dealers  Dealer?
  orders   Order[]
  partners Partner?
}

model Warranty {
  id         Int      @id @default(autoincrement())
  start_date DateTime @db.Date
  end_date   DateTime @db.Date
  type       String   @db.VarChar
  scooter_id Int      @unique
  scooter    Scooter  @relation(fields: [scooter_id], references: [id], onDelete: Cascade)
}
