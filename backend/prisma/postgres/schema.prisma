generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Article {
  id             Int          @id @default(autoincrement())
  name           String       @unique @db.VarChar
  stock_quantity Int
  order_items    Order_item[]

  @@map(name: "articles")
}

model Dealer {
  id             Int       @id @default(autoincrement())
  company_name   String    @db.VarChar
  contact_number String    @unique @db.VarChar
  contact_email  String    @unique @db.VarChar
  address        String    @db.VarChar
  country        String    @db.VarChar
  postal_code    String    @db.VarChar
  user_id        Int?      @unique
  users          User?     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_dealers_user")
  scooters       Scooter[]

  @@map(name: "dealers")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Maintenance {
  id              Int      @id @default(autoincrement())
  type            String   @db.VarChar
  date            DateTime
  cost            Float
  comment         String?
  technician_name String   @db.VarChar
  scooter         Scooter  @relation(fields: [scooter_id], references: [id]) // Add this line
  scooter_id      Int // Foreign key to Scooter

  @@map(name: "maintenances")
}

model Notification {
  id           String   @id @default(uuid())
  message      String
  recipient    String
  type         String
  status       String
  trigger_date DateTime // snake_case in the database
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Order_item {
  id          Int      @id @default(autoincrement())
  article_id  Int
  unit_price  Decimal  @db.Decimal(10, 2)
  quantity    Int
  total_price Decimal? @db.Decimal(10, 2)
  order_id    Int
  articles    Article  @relation(fields: [article_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_order_item_article")
  orders      Order    @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_order_item_order")

  @@map(name: "order_items")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Order {
  id                Int          @id @default(autoincrement())
  supplier          String       @db.VarChar
  status            String       @db.VarChar
  delivery_due_date DateTime     @db.Date
  tax               Decimal      @db.Decimal(5, 2)
  total_amount      Decimal      @db.Decimal(10, 2)
  user_id           Int
  order_items       Order_item[]
  users             User         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_order_user")

  @@map(name: "orders")
}

model Partner {
  id             Int       @id @default(autoincrement())
  company_name   String    @db.VarChar
  contact_number String    @unique @db.VarChar
  contact_email  String    @unique @db.VarChar
  address        String    @db.VarChar
  country        String    @db.VarChar
  postal_code    String    @db.VarChar
  type           String    @db.VarChar
  user_id        Int?      @unique
  users          User?     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_partners_user")
  scooters       Scooter[]

  @@map(name: "partners")
}

model Scooter {
  id               Int           @id @default(autoincrement())
  license_plate    String        @unique @db.VarChar
  status           String        @db.VarChar
  dealer_id        Int?
  partner_id       Int?
  scooterModelId Int
  maintenances     Maintenance[]
  dealers          Dealer?       @relation(fields: [dealer_id], references: [id], onUpdate: NoAction, map: "fk_scooter_dealer")
  scooters_models  Scooter_model @relation(fields: [scooterModelId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_scooter_model")
  partners         Partner?      @relation(fields: [partner_id], references: [id], onUpdate: NoAction, map: "fk_scooter_partner")
  warranty         Warranty?

  @@map(name: "scooters")
}

model Scooter_model {
  id                   Int       @id @default(autoincrement())
  name                 String    @unique @db.VarChar
  battery_range        Int
  maintenance_interval Int
  scooters             Scooter[]

  @@map(name: "scooters_models")
}

model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique @db.VarChar
  password String   @db.VarChar
  role     String   @db.VarChar
  dealers  Dealer?
  orders   Order[]
  partners Partner?

  @@map(name: "users")
}

model Warranty {
  id         Int      @id @default(autoincrement())
  start_date DateTime @db.Date
  end_date   DateTime @db.Date
  type       String   @db.VarChar
  scooter_id Int      @unique
  scooters   Scooter  @relation(fields: [scooter_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_warranty_scooter")

  @@map(name: "warranties")
}
