// ðŸ’¡ Importation des modules nÃ©cessaires de NestJS Mongoose
import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { Document } from 'mongoose';

// ðŸ’¡ DÃ©claration du type du document pour MongoDB
// Ici, `NotificationDocument` reprÃ©sente un document MongoDB basÃ© sur la classe `Notification`
export type NotificationDocument = Notification & Document;

// ðŸ’¡ DÃ©claration du Schema pour MongoDB
// Utilisation du dÃ©corateur `@Schema()` pour indiquer Ã  Mongoose que cette classe reprÃ©sente un schÃ©ma MongoDB
@Schema({ timestamps: true }) // timestamps: true ajoute automatiquement createdAt et updatedAt
export class Notification {
  
  // ðŸ’¡ PropriÃ©tÃ© `message` de la notification
  // Utilisation de `@Prop()` pour indiquer Ã  Mongoose que c'est un champ du document
  @Prop({ required: true }) // `required: true` signifie que ce champ est obligatoire
  message: string = 'Aucune notification';   // ðŸ‘ˆ Valeur par dÃ©faut pour Ã©viter les erreurs si aucune valeur n'est fournie

  // ðŸ’¡ PropriÃ©tÃ© `maintenance_id` pour associer la notification Ã  une maintenance
  @Prop({ required: true }) // `required: true` signifie que ce champ est obligatoire
  maintenance_id: number = 0;                // ðŸ‘ˆ Valeur par dÃ©faut pour Ã©viter les erreurs si aucune valeur n'est fournie
}

// ðŸ’¡ CrÃ©ation du schÃ©ma Mongoose Ã  partir de la classe `Notification`
// `SchemaFactory.createForClass()` transforme la classe TypeScript en schÃ©ma Mongoose compatible avec MongoDB
export const NotificationSchema = SchemaFactory.createForClass(Notification);
