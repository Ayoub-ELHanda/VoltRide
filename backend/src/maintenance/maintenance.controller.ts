// âœ… Importation des modules nÃ©cessaires de NestJS et Prisma
import { Controller, Get, Post, Patch, Delete, Body, Param } from '@nestjs/common';
import { PrismaClient } from '@prisma/client';

// âœ… CrÃ©ation d'une instance de PrismaClient
const prisma = new PrismaClient();

// =========================================
// âœ… DÃ©claration du ContrÃ´leur Maintenance
// =========================================
@Controller('maintenances')   // ğŸ‘ˆ Route de base pour ce contrÃ´leur
export class MaintenanceController {

  // =========================================
  // âœ… GET /maintenances
  // RÃ©cupÃ©rer toutes les maintenances
  // =========================================
  @Get()
  async getAll() {
    // âœ… Utilisation de Prisma pour rÃ©cupÃ©rer toutes les maintenances
    return await prisma.maintenance.findMany();
  }

  // =========================================
  // âœ… GET /maintenances/:id
  // RÃ©cupÃ©rer une maintenance par ID
  // =========================================
  @Get(':id')
  async getById(@Param('id') id: number) {
    // âœ… Conversion de l'ID en nombre et recherche dans la base de donnÃ©es
    return await prisma.maintenance.findUnique({
      where: { id: Number(id) }   // ğŸ‘ˆ Conversion explicite en nombre
    });
  }

  // =========================================
  // âœ… POST /maintenances
  // CrÃ©er une nouvelle maintenance
  // =========================================
  @Post()
  async create(@Body() data: any) {
    // âœ… Utilisation de Prisma pour crÃ©er une nouvelle entrÃ©e de maintenance
    return await prisma.maintenance.create({
      data: {
        technician_name: data.technician_name,   // ğŸ‘ˆ Nom du technicien
        type: data.type,                         // ğŸ‘ˆ Type de maintenance (ex: prÃ©ventive, corrective)
        status: data.status,                     // ğŸ‘ˆ Statut de la maintenance (ex: planifiÃ©e, en cours, terminÃ©e)
        date_planned: new Date(data.date_planned), // ğŸ‘ˆ Date de planification (convertie en Date)
        date_completed: data.date_completed ? new Date(data.date_completed) : null, // ğŸ‘ˆ Date de complÃ©tion (ou null)
        cost: data.cost,                         // ğŸ‘ˆ CoÃ»t de la maintenance
        comment: data.comment,                   // ğŸ‘ˆ Commentaires supplÃ©mentaires
        scooter_id: data.scooter_id               // ğŸ‘ˆ RÃ©fÃ©rence au scooter concernÃ©
      }
    });
  }

  // =========================================
  // âœ… PATCH /maintenances/:id
  // Mettre Ã  jour une maintenance existante
  // =========================================
  @Patch(':id')
  async update(@Param('id') id: number, @Body() data: any) {
    // âœ… Mise Ã  jour d'une maintenance existante par ID
    return await prisma.maintenance.update({
      where: { id: Number(id) },
      data: {
        technician_name: data.technician_name,
        type: data.type,
        status: data.status,
        date_planned: new Date(data.date_planned),
        date_completed: data.date_completed ? new Date(data.date_completed) : null,
        cost: data.cost,
        comment: data.comment,
        scooter_id: data.scooter_id
      }
    });
  }

  // =========================================
  // âœ… DELETE /maintenances/:id
  // Supprimer une maintenance par ID
  // =========================================
  @Delete(':id')
  async delete(@Param('id') id: number) {
    // âœ… Suppression d'une maintenance existante par ID
    return await prisma.maintenance.delete({
      where: { id: Number(id) }
    });
  }
}
